#!/usr/bin/env python
# coding:utf-8

from fysom import Fysom, FysomError
################################################
# 配送员状态
################################################
# 初始状态
CHECK_STATUS_INIT = 'CHECK_INIT'
# 城市未开通
CHECK_STATUS_NO_AREA_MANAGER = 'CHECK_NO_AREA_MANAGER'
# 评分未通过
CHECK_STATUS_REGISTERED_DENY = 'CHECK_REGISTERED_DENY'
# WEB注册
CHECK_STATUS_WEB_REGISTERED = 'CHECK_WEB_REGISTERED'
# APP注册
CHECK_STATUS_APP_REGISTERED = 'CHECK_APP_REGISTERED'
# 兼职审核通过
CHECK_STATUS_PART_TIME_WORKING = 'CHECK_PART_TIME_WORKING'
# 申请全职待审核状态
CHECK_STATUS_APPLY_FULL_TIME = 'CHECK_APPLY_FULL_TIME'
# 申请全职待面试状态
CHECK_STATUS_WAIT_INTERVIEW = 'CHECK_WAIT_INTERVIEW'
# 已面试
CHECK_STATUS_HRBP_INTERVIEWED = 'CHECK_HRBP_INTERVIEWED'
# 资料待补全
CHECK_STATUS_WAIT_INFO_COMPLETED = 'CHECK_WAIT_INFO_COMPLETED'
# 人力审核通过
CHECK_STATUS_PENDING = 'CHECK_PENDING'
# 人力审核拒绝
CHECK_STATUS_PENDING_DENY = 'CHECK_PENDING_DENY'
# 管控审核通过
CHECK_STATUS_UNALLOCATED = 'CHECK_UNALLOCATED'
# 管控审核拒绝
CHECK_STATUS_UNALLOCATED_DENY = 'CHECK_UNALLOCATED_DENY'
# 已绑定小队
CHECK_STATUS_BINDING_TEAM = 'CHECK_BINDING_TEAM'
# 已上岗
CHECK_STATUS_WORKING = 'CHECK_WORKING'
# 申请离职
CHECK_STATUS_RESIGN = 'CHECK_RESIGN'
# 离职
CHECK_STATUS_QUITED = 'CHECK_QUITED'
# 推荐自离
CHECK_STATUS_RECOMMEND_QUIT = 'CHECK_RECOMMEND_QUIT'
# 黑名单
CHECK_STATUS_BANNED = 'CHECK_STATUS_BANNED'
# 建议淘汰
CHECK_STATUS_ELIMINATED = 'CHECK_ELIMINATED'
# 停职
CHECK_STATUS_RETAIN = 'CHECK_STATUS_RETAIN'
# 停职申请离职
CHECK_STATUS_RETAIN_RESIGN = 'CHECK_RETAIN_RESIGN'
# 7日未入职
CHECK_STATUS_NO_FIRST_ORDER = 'CHECK_NO_FIRST_ORDER'

# 过渡期的老状态
# 人力面试拒绝
CHECK_STATUS_HR_INTERVIEWED_DENY = 'CHECK_HR_INTERVIEWED_DENY'
# 人力面试通过
CHECK_STATUS_HR_INTERVIEWED = 'CHECK_HR_INTERVIEWED'
# 已注册
CHECK_STATUS_REGISTERED = "CHECK_REGISTERED"

# 状态名称映射表
CHECK_STATUS_NAME_MAP = {
    CHECK_STATUS_INIT: u'初始状态',
    CHECK_STATUS_NO_AREA_MANAGER: u'城市未开通',
    CHECK_STATUS_REGISTERED_DENY: u'评分未通过',
    CHECK_STATUS_WEB_REGISTERED: u'WEB注册',
    CHECK_STATUS_APP_REGISTERED: u'APP注册',
    CHECK_STATUS_PART_TIME_WORKING: u'兼职审核通过',
    CHECK_STATUS_APPLY_FULL_TIME: u'申请全职待审核',
    CHECK_STATUS_WAIT_INTERVIEW: u'申请全职待面试',
    CHECK_STATUS_HR_INTERVIEWED_DENY: u'人力面试拒绝',
    CHECK_STATUS_HR_INTERVIEWED: u'人力面试通过',
    CHECK_STATUS_HRBP_INTERVIEWED: u'已面试',
    CHECK_STATUS_WAIT_INFO_COMPLETED: u'资料待补全',
    CHECK_STATUS_PENDING: u'人力审核通过',
    CHECK_STATUS_PENDING_DENY: u'人力审核拒绝',
    CHECK_STATUS_UNALLOCATED: u'管控审核通过',
    CHECK_STATUS_UNALLOCATED_DENY: u'管控审核拒绝',
    CHECK_STATUS_BINDING_TEAM: u'已绑定小队',
    CHECK_STATUS_WORKING: u'已上岗',
    CHECK_STATUS_RESIGN: u'申请离职',
    CHECK_STATUS_QUITED: u'离职',
    CHECK_STATUS_RECOMMEND_QUIT: u'推荐自离',
    CHECK_STATUS_BANNED: u'黑名单',
    CHECK_STATUS_ELIMINATED: u'建议淘汰',
    CHECK_STATUS_RETAIN: u'停职',
    CHECK_STATUS_RETAIN_RESIGN: u'停职申请离职',
    CHECK_STATUS_NO_FIRST_ORDER: u'7日未入职',
    # 以下是过渡期的老状态
    CHECK_STATUS_REGISTERED: u"旧版流程的评分通过",
}

################################################
# 不同业务功能配送员状态分类集合
################################################
# 全职能接单状态
FULL_TIME_CAN_ADOPTED_STATUS_LIST = [
    CHECK_STATUS_WORKING, CHECK_STATUS_RESIGN,
    CHECK_STATUS_RECOMMEND_QUIT, CHECK_STATUS_ELIMINATED,
    CHECK_STATUS_BINDING_TEAM
]
# 所有能接单
CAN_ADOPTED_STATUS_LIST = FULL_TIME_CAN_ADOPTED_STATUS_LIST + [
    CHECK_STATUS_PART_TIME_WORKING
]
# 可绑定组织架构树的状态集合 = 已上岗状态集合 + 监管审核通过状态
CAN_BOUND_TREE_STATUS_LIST = CAN_ADOPTED_STATUS_LIST + [CHECK_STATUS_UNALLOCATED]
CAN_BOUND_TREE_STATUS_LIST.pop(
    CAN_BOUND_TREE_STATUS_LIST.index(CHECK_STATUS_PART_TIME_WORKING)
)
# 已离职的状态集合
QUIT_STATUS_LIST = [
    CHECK_STATUS_QUITED, CHECK_STATUS_BANNED
]
# 待上岗的状态集合
WAIT_WORKING_STATUS_LIST = [
    CHECK_STATUS_REGISTERED, CHECK_STATUS_HR_INTERVIEWED,
    CHECK_STATUS_PENDING, CHECK_STATUS_WEB_REGISTERED,
    CHECK_STATUS_APP_REGISTERED, CHECK_STATUS_WAIT_INFO_COMPLETED,
    CHECK_STATUS_UNALLOCATED, CHECK_STATUS_APPLY_FULL_TIME, CHECK_STATUS_WAIT_INTERVIEW
]

####################################################
# 配送员状态转换事件
####################################################
# 城市已开通且评分通过且WEB注册
EVENT_CITY_SCORE_WEB_YES = 1
# 城市未开通
EVENT_CITY_NO = 2
# 城市已开通且评分已通过且APP注册
EVENT_CITY_SCORE_APP_YES = 3
# 城市已开通且评分不通过
EVENT_CITY_SCORE_NO = 4
# 人事经理面试通过
EVENT_HM_INTERVIEW_YES = 5
# 人事经理面试拒绝
EVENT_HM_INTERVIEW_NO = 6
# APP资料补全
EVENT_COMPLETE_INFO = 7
# 后台人力审核通过
EVENT_HR_CHECK_YES = 8
# 后台人力审核拒绝
EVENT_HR_CHECK_NO = 9
# 后台人力判定资料不全
EVENT_HR_DECIDE_INFO_INCOMPLETED = 10
# 后台管控审核通过
EVENT_MC_CHECK_YES = 11
# 后台管控审核拒绝
EVENT_MC_CHECK_NO = 12
# 后台管控审核退回
EVENT_MC_RETURN = 22
# 后台配送架构绑定
EVENT_BIND_TREE = 13
# 后台配送架构解绑
EVENT_UNBIND_TREE = 21
# 接首单
EVENT_ADOPT_FIRST_ORDER = 14
# 申请离职
EVENT_APPLY_RESIGN = 15
# 人事经理判定辞退
EVENT_HM_DECIDE_QUITE = 16
# 人事经理判定留职
EVENT_HM_DECIDE_RETAIN = 17
# 连续3天旷工
EVENT_CONTINUE_ABSENT = 18
# 当月累计5次淘汰预警
EVENT_WARNING = 19
# 7天未接首单
EVENT_CONTINUE_NO_FIRST_ORDER = 20
# 兼职风先生申请成为全职
EVENT_APPLY_FULL_TIME = 23
# 绑定区域人力经理
EVENT_BIND_HRBP = 24
# 后台拉黑
EVENT_BANNED = 25
# 管控拒绝返回兼职状态
EVENT_MC_RETURN_TO_PART_TIME = 26

# TODO:以下两个事件是通过trigger在别的事件执行的时候调用的
# 注册时系统判定全职申请
EVENT_SYSTEM_JUMP_FULL_TIME = 27
# 注册时系统判定全职申请然后被拒绝回到初始状态
EVENT_SYSTEM_JUMP_INIT = 28

# TODO:以下两个事件是通过trigger在别的事件执行的时候调用的
# 离职被拒绝返回working(需接首单)
EVENT_SYSTEM_DENY_QUIT_TO_WORKING = 30
# 离职被拒绝返回已邦队
EVENT_SYSTEM_DENY_QUIT_TO_BINDING_TEAM = 31

# 风先生申请离职然后自己撤销
EVENT_APPLY_RESIGN_CANCEL_WITH_FIRST_ORDER = 32     # 返回已邦队且有首单
EVENT_APPLY_RESIGN_CANCEL_ONLY_BOUND_TEAM = 33      # 返回仅绑队但是没有首单

# 风人力反馈面试结果
EVENT_HRBP_INTERVIEW = 34

events = [
    ('EVENT_CITY_NO', CHECK_STATUS_INIT, CHECK_STATUS_NO_AREA_MANAGER),
    # (EVENT_CITY_SCORE_NO, CHECK_STATUS_INIT, CHECK_STATUS_REGISTERED_DENY),
    # (EVENT_CITY_SCORE_WEB_YES, CHECK_STATUS_INIT, CHECK_STATUS_WEB_REGISTERED),
    # (EVENT_CITY_SCORE_APP_YES, CHECK_STATUS_INIT, CHECK_STATUS_APP_REGISTERED),
    ('clear', 'yellow', 'green')
]
fsm = Fysom(initial=CHECK_STATUS_INIT, events=events)


class A(object):
    def a(**kw):
        return 1

    FSM = {
            (CHECK_STATUS_INIT, EVENT_CITY_NO): CHECK_STATUS_NO_AREA_MANAGER,
            (CHECK_STATUS_INIT, EVENT_CITY_SCORE_NO): a,
            (CHECK_STATUS_INIT, EVENT_CITY_SCORE_WEB_YES): CHECK_STATUS_WEB_REGISTERED
    }

print A.FSM[(CHECK_STATUS_INIT, EVENT_CITY_SCORE_NO)]()